#!/usr/bin/env python
PKG="gazebo_plugins"
import math
import roslib
roslib.load_manifest(PKG)
import sys, unittest
import os, os.path, time
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Pose,Quaternion,Point, PoseStamped, PoseWithCovariance, TwistWithCovariance, Twist, Vector3
from nav_msgs.msg import Odometry
import tf.transformations as tft
from numpy import float64

#initialize ros node
rospy.init_node("pub_pose", anonymous=True)
pub_set_pose_topic = rospy.Publisher("set_object_pose_topic", Odometry)
# compoose goal message
COV = [float64(0),float64(0),float64(0),float64(0),float64(0),float64(0), \
       float64(0),float64(0),float64(0),float64(0),float64(0),float64(0), \
       float64(0),float64(0),float64(0),float64(0),float64(0),float64(0), \
       float64(0),float64(0),float64(0),float64(0),float64(0),float64(0), \
       float64(0),float64(0),float64(0),float64(0),float64(0),float64(0), \
       float64(0),float64(0),float64(0),float64(0),float64(0),float64(0)  ]
h = rospy.Header()
h.stamp = rospy.get_rostime()
h.frame_id = "world" # target frame of the set-pose command.  Currently gazebo only supports gazebo world frame.
p = Point(0,0,2)  # pick an arbitrary target point
tmpq = tft.quaternion_from_euler(math.pi/2,0,0)  # pick an arbitrary target orientation
q = Quaternion(tmpq[0],tmpq[1],tmpq[2],tmpq[3])
pose = Pose(p,q)
pwc = PoseWithCovariance(pose,COV)
twc = TwistWithCovariance(Twist(Vector3(),Vector3()),COV)
child_frame_id = "" # this is not used
target_pose_msg = Odometry(h,child_frame_id,pwc,twc)

#publish topic for 3 seconds at 10Hz
timeout_t = time.time() + 3
while not rospy.is_shutdown() and time.time() < timeout_t:
  pub_set_pose_topic.publish(target_pose_msg)
  time.sleep(0.1)