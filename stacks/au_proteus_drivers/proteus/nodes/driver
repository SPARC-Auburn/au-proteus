#!/usr/bin/env python
# encoding: utf-8

"""
driver.py - Provides an interface for communicating with a proteus robot.

Created by William Woodall on 2010-04-20.
"""
__author__ = "William Woodall"

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('proteus')
import rospy

# ROS msg and srv imports
from proteus.msg import Encoder
from proteus.msg import IRData
from proteus.msg import Move as MoveMsg
from proteus.srv import Move as MoveSrv

# Python Libraries
import sys

# Peer Libraries
from proteus.proteus import Proteus

###  Variables  ###
proteus = None
encoder_topic = None
ir_data_topic = None

###  Functions  ###

def publishEncoderData(data):
    """Publishes encoder data"""
    pass

def publishIRSensorData(data):
    """Publishes IR Sensor data"""
    pass

def handleMoveMsg(msg):
    """Called when a Move message is received"""
    proteus.move(msg.speed, msg.direction)
    return 0

def main():
    # ROS init
    rospy.init_node("proteus_driver")
    # Get the command line arguments
    cmd_line_args = rospy.myargv(argv=sys.argv)
    # If the serial port command was passed use it otherwise pass nothing
    if len(cmd_line_args) > 1:
        proteus = Proteus(cmd_line_args[1])
    else:
        proteus = Proteus()
    # Register publishing callbacks
    proteus.onEncodersData = publishEncoderData
    proteus.onIRSensorData = publishIRSensorData
    # Setup Services and Topics
    encoder_topic = rospy.Publisher("encoders", Encoder)
    ir_data_topic = rospy.Publisher("ir_data", IRData)
    rospy.Subscriber("motor_control", MoveMsg, handleMoveMsg)
    rospy.Service("move", MoveSrv, handleMoveMsg)
    # Tell Proteus to start
    proteus.start()
    # Handle Service Requests until shutdown
    rospy.spin()
    # Tell Proteus to stop cleanly
    proteus.stop()

###  If Main  ###
if __name__ == '__main__':
    main()
